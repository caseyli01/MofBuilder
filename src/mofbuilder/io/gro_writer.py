from pathlib import Path
import sys
from veloxchem.outputstream import OutputStream
from veloxchem.veloxchemlib import mpi_master
import mpi4py.MPI as MPI
from veloxchem.errorhandler import assert_msg_critical

class GroWriter:
    def __init__(self, comm=None, ostream=None, filepath=None, debug=False):
        if comm is None:
            comm = MPI.COMM_WORLD

        if ostream is None:
            if comm.Get_rank() == mpi_master():
                ostream = OutputStream(sys.stdout)
            else:
                ostream = OutputStream(None)

        # mpi information
        self.comm = comm
        self.rank = self.comm.Get_rank()
        self.nodes = self.comm.Get_size()

        # output stream
        self.ostream = ostream
        self.filepath = filepath
        self._debug = debug

    def write(self, filepath=None, header="Generated by MofBuilder\n", lines=[], box=None, triclinic=False):
        """
        line format:
        atom_type, atom_label, atom_number, residue_name, residue_number, x, y, z, spin, charge, note
        1         2    3      4            5              6  7  8 9    10 11
        ATOM      1    C       MOL          1            1.000 2.000 3.000 1.00 0.00 C1
        """
        "data format[atom_type, atom_label, atom_number, residue_name, residue_number, value_x, value_y, value_z, spin, charge, note]"
        filepath = Path(filepath) if filepath is not None else Path(self.filepath)
        assert_msg_critical(filepath is not None, "pdb filepath is not specified")
        # check if the file directory exists and create it if it doesn't
        self.file_dir = Path(filepath).parent
        if self._debug:
            self.ostream.print_info(f"targeting directory: {self.file_dir}")
        self.file_dir.mkdir(parents=True, exist_ok=True)

        if filepath.suffix != ".gro":
            filepath = filepath.with_suffix(".gro")
        
         
        newgro = []
        newgro.append(header)
        newgro.append(str(len(lines)) + "\n")
        last_name = ""
        last_residue_number = 0
        residue_count = 0

        with open(filepath, "w") as fp:
            # Iterate over each line in the input file
            for i in range(len(lines)):
                values = lines[i]
                if values[3] != last_name or values[4] != last_residue_number:
                    residue_count += 1
                    last_name = lines[i][3]
                    last_residue_number = lines[i][4]
                atom_type = values[0]
                atom_label = values[1]
                atom_number = i + 1
                residue_name = values[3].split('_')[0][:3]
                residue_number = residue_count
                x = float(values[5])/10  # convert to nm
                y = float(values[6])/10
                z = float(values[7])/10
                spin = values[8]
                charge = values[9]
                note = values[10]

                formatted_line = "%5d%-5s%5s%5d%8.3f%8.3f%8.3f" % (
                    residue_number,
                    residue_name[:5],
                    atom_label[:5],
                    atom_number,
                    x,
                    y,
                    z,
                )
                newgro.append(formatted_line + "\n")
            if triclinic:
                tail = f"{float(box[0])/10:.6f} {float(box[1])/10:.6f} {float(box[2])/10:.6f} {float(box[3]):.2f} {float(box[4]):.2f} {float(box[5]):.2f}\n"
            else:
                tail = f"{float(box[0])/10:.6f} {float(box[1])/10:.6f} {float(box[2])/10:.6f}\n"
            newgro.append(tail)
            fp.writelines(newgro)
