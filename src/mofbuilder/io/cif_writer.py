"""
CIF file writer for MOF structures.

Copyright (C) 2024 MofBuilder Contributors

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
"""

from pathlib import Path
from typing import Optional

from ..core import Framework


class CifWriter:
    """
    Writer for Crystallographic Information Files (CIF).
    
    This class provides functionality to write Framework objects to CIF files.
    """
    
    def __init__(self):
        """Initialize the CIF writer."""
        pass
    
    def write(self, framework: Framework, filepath: Path, 
              title: Optional[str] = None) -> None:
        """
        Write a Framework object to a CIF file.
        
        Args:
            framework: Framework object to write.
            filepath: Path where to write the CIF file.
            title: Optional title for the structure.
        """
        filepath.parent.mkdir(parents=True, exist_ok=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            self._write_cif_content(f, framework, title)
    
    def _write_cif_content(self, file, framework: Framework, 
                          title: Optional[str] = None) -> None:
        """
        Write CIF content to file.
        
        Args:
            file: File object to write to.
            framework: Framework object.
            title: Optional title.
        """
        # Write header
        file.write("# CIF file generated by MofBuilder\n")
        file.write(f"# Framework: {framework.name}\n")
        if title:
            file.write(f"# Title: {title}\n")
        file.write("#\n")
        
        # Data block
        file.write(f"data_{framework.name}\n\n")
        
        # Chemical information
        file.write("# Chemical information\n")
        file.write(f"_chemical_formula_sum '{framework.formula}'\n")
        file.write(f"_chemical_name_common '{framework.name}'\n\n")
        
        # Cell parameters
        lattice = framework.lattice
        file.write("# Cell parameters\n")
        file.write(f"_cell_length_a    {lattice.a:.6f}\n")
        file.write(f"_cell_length_b    {lattice.b:.6f}\n")
        file.write(f"_cell_length_c    {lattice.c:.6f}\n")
        file.write(f"_cell_angle_alpha {lattice.alpha:.3f}\n")
        file.write(f"_cell_angle_beta  {lattice.beta:.3f}\n")
        file.write(f"_cell_angle_gamma {lattice.gamma:.3f}\n")
        file.write(f"_cell_volume      {lattice.volume:.3f}\n\n")
        
        # Space group (simplified - assumes P1)
        file.write("# Space group\n")
        file.write("_space_group_name_H-M_alt    'P 1'\n")
        file.write("_space_group_IT_number       1\n\n")
        
        # Atomic coordinates
        if framework.atoms:
            file.write("# Atomic coordinates\n")
            file.write("loop_\n")
            file.write("_atom_site_label\n")
            file.write("_atom_site_type_symbol\n")
            file.write("_atom_site_fract_x\n")
            file.write("_atom_site_fract_y\n")
            file.write("_atom_site_fract_z\n")
            file.write("_atom_site_occupancy\n")
            
            for i, atom in enumerate(framework.atoms):
                # Convert to fractional coordinates
                frac_coords = lattice.cartesian_to_fractional(atom.position)
                label = f"{atom.element}{i+1}"
                file.write(f"{label:<10} {atom.element:<3} "
                          f"{frac_coords[0]:8.6f} {frac_coords[1]:8.6f} "
                          f"{frac_coords[2]:8.6f} 1.000\n")
        
        file.write("\n")